#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä
"""

import requests
import json

BASE_URL = "http://localhost:8000"

def test_filter_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ
    print("\n1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ (–æ—Ç 3 –¥–æ 5 –º–ª–Ω):")
    response = requests.get(f"{BASE_URL}/api/listings/filter", params={
        "min_price": 3000000,
        "max_price": 5000000
    })
    if response.status_code == 200:
        data = response.json()
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {data['total']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        for listing in data['listings'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"   - {listing['title']} | {listing['price']:,} ‚ÇΩ")
    else:
        print(f"   –û—à–∏–±–∫–∞: {response.status_code}")
    
    # –¢–µ—Å—Ç 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç
    print("\n2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç (—Å—Ç—É–¥–∏—è):")
    response = requests.get(f"{BASE_URL}/api/listings/filter", params={
        "rooms": "—Å—Ç—É–¥–∏—è"
    })
    if response.status_code == 200:
        data = response.json()
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {data['total']} —Å—Ç—É–¥–∏–π")
        for listing in data['listings'][:3]:
            print(f"   - {listing['title']} | {listing['area']} –º¬≤")
    else:
        print(f"   –û—à–∏–±–∫–∞: {response.status_code}")
    
    # –¢–µ—Å—Ç 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–ª–æ—â–∞–¥–∏
    print("\n3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–ª–æ—â–∞–¥–∏ (–æ—Ç 20 –¥–æ 40 –º¬≤):")
    response = requests.get(f"{BASE_URL}/api/listings/filter", params={
        "min_area": 20,
        "max_area": 40
    })
    if response.status_code == 200:
        data = response.json()
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {data['total']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        for listing in data['listings'][:3]:
            print(f"   - {listing['title']} | {listing['area']} –º¬≤")
    else:
        print(f"   –û—à–∏–±–∫–∞: {response.status_code}")
    
    # –¢–µ—Å—Ç 4: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    print("\n4. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (—Å—Ç—É–¥–∏—è, –µ–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç, –¥–æ 4 –º–ª–Ω):")
    response = requests.get(f"{BASE_URL}/api/listings/filter", params={
        "rooms": "—Å—Ç—É–¥–∏—è",
        "finish": "–µ–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç",
        "max_price": 4000000
    })
    if response.status_code == 200:
        data = response.json()
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {data['total']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        for listing in data['listings'][:3]:
            print(f"   - {listing['title']} | {listing['price']:,} ‚ÇΩ | {listing['remont']}")
    else:
        print(f"   –û—à–∏–±–∫–∞: {response.status_code}")

def test_search_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–∏—Å–∫–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–∏—Å–∫–∞")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
    print("\n1. –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É '—Å—Ç—É–¥–∏—è':")
    response = requests.get(f"{BASE_URL}/api/listings/search", params={
        "q": "—Å—Ç—É–¥–∏—è"
    })
    if response.status_code == 200:
        data = response.json()
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {data['total']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        for listing in data['listings'][:3]:
            print(f"   - {listing['title']}")
    else:
        print(f"   –û—à–∏–±–∫–∞: {response.status_code}")
    
    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É
    print("\n2. –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É '–£—Ä–∞–ª—å—Å–∫–∞—è':")
    response = requests.get(f"{BASE_URL}/api/listings/search", params={
        "q": "–£—Ä–∞–ª—å—Å–∫–∞—è"
    })
    if response.status_code == 200:
        data = response.json()
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {data['total']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        for listing in data['listings'][:3]:
            print(f"   - {listing['address']}")
    else:
        print(f"   –û—à–∏–±–∫–∞: {response.status_code}")

def test_stats_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    print("=" * 50)
    
    response = requests.get(f"{BASE_URL}/api/listings/stats")
    if response.status_code == 200:
        data = response.json()
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {data['total_listings']}")
        
        print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º:")
        price_stats = data['price_stats']
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price_stats['min_price']:,} ‚ÇΩ")
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price_stats['max_price']:,} ‚ÇΩ")
        print(f"  –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {price_stats['avg_price']:,.0f} ‚ÇΩ")
        
        print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:")
        for region in data['region_stats'][:5]:
            print(f"  {region['region']}: {region['count']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç:")
        for rooms in data['rooms_stats'][:5]:
            print(f"  {rooms['rooms']}: {rooms['count']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    else:
        print(f"–û—à–∏–±–∫–∞: {response.status_code}")

def test_router_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Ä–æ—É—Ç–µ—Ä–∞"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Ä–æ—É—Ç–µ—Ä–∞")
    print("=" * 50)
    
    # –¢–µ—Å—Ç —Ä–æ—É—Ç–µ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    print("\n1. –¢–µ—Å—Ç —Ä–æ—É—Ç–µ—Ä–∞ /listings/filter:")
    response = requests.get(f"{BASE_URL}/listings/filter", params={
        "min_price": 2000000,
        "max_price": 6000000,
        "rooms": "—Å—Ç—É–¥–∏—è"
    })
    if response.status_code == 200:
        data = response.json()
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(data)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        for listing in data[:2]:
            print(f"   - {listing['title']}")
    else:
        print(f"   –û—à–∏–±–∫–∞: {response.status_code}")
    
    # –¢–µ—Å—Ç —Ä–æ—É—Ç–µ—Ä–∞ –ø–æ–∏—Å–∫–∞
    print("\n2. –¢–µ—Å—Ç —Ä–æ—É—Ç–µ—Ä–∞ /listings/search:")
    response = requests.get(f"{BASE_URL}/listings/search", params={
        "q": "–Ω–æ–≤—ã–π"
    })
    if response.status_code == 200:
        data = response.json()
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(data)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        for listing in data[:2]:
            print(f"   - {listing['title']}")
    else:
        print(f"   –û—à–∏–±–∫–∞: {response.status_code}")
    
    # –¢–µ—Å—Ç —Ä–æ—É—Ç–µ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("\n3. –¢–µ—Å—Ç —Ä–æ—É—Ç–µ—Ä–∞ /listings/stats:")
    response = requests.get(f"{BASE_URL}/listings/stats")
    if response.status_code == 200:
        data = response.json()
        print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['total_listings']}")
        print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {data['price_stats']['avg_price']:,.0f} ‚ÇΩ")
    else:
        print(f"   –û—à–∏–±–∫–∞: {response.status_code}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    print()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        test_filter_api()
        test_search_api()
        test_stats_api()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–æ—É—Ç–µ—Ä–∞
        test_router_endpoints()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: uvicorn app:app --reload")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}") 